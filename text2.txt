Task List
The best way to start is to read through the entire assignment first. Read through every bullet to make sure you and your team
have a plan.
Software Task List
❐ In your solution, you cannot use Python packages that solve the duplicate detection task for you. The goal is to implement your
own approach. That said, standard tools (such as those for generating n-grams or hashing into signatures) are completely
acceptable. You will know the line separating libraries that help in solving this problem (and so you should definitely use
them!) and those that solve the problem for you (don’t use them). For example, below, I will encourage you to look at Hugging
Face’s DataTrove which implements deduplication using both Bloom Filters and LSH. You are not allowed to copy their
implementation, but you can use it as reference for your own. Your initial experiments have to be performed on a single CPU
core.
❐ To get started, make sure you and your teammates are using a virtual environment to be shared across your team. Then, set up
local and remote tracking with Git so your team can collaborate effectively. For these two problems, create a single repository.
❐ Structure the application into a package. This time, you don’t have any sample project structuring code, so you should start
from a cookiecutter template. You do have lots of code for the Bloom filter and LSH from the labs that you should
populate your projects with once you’ve made the project structure.
❐ Write an informative README file once you’re done. The diataxis website offers sound advice on writing quality technical
documentation.
❐ Use GitHub Actions to perform each of the following steps in a workflow file in .github/workflows/. Remember: this
has already been done for you in a previous lab!
❐ define an operating system
❐ install Python
❐ access the repository
❐ install poetry
❐ install our package
❐ run a few tests
❒ First, define a few unit tests for the Bloom filter and LSH implementations you write later on in the assignment
using pytest: this will involve creating a tests directory and writing a Python module in that directory to
perform a test. Look at the Bloom filter lab code for an example of a sanity check we did to make sure the
filter worked correctly. Do something similar: use artificial data like small “documents” in a text file also
saved in the tests directory. For LSH, you should have tests at sensible places. For example, test the
computation of your minhashes, test the banding for LSH, and test Union-Find. Implement at least: two